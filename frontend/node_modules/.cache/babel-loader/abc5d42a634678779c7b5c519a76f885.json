{"remainingRequest":"/Users/berlin/Documents/platform/frontend/node_modules/babel-loader/lib/index.js!/Users/berlin/Documents/platform/frontend/src/mixins/general.js","dependencies":[{"path":"/Users/berlin/Documents/platform/frontend/src/mixins/general.js","mtime":1634085832809},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1634257404436},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/babel-loader/lib/index.js","mtime":1634257405404}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/berlin/Documents/platform/frontend/src/mixins/general.js"],"names":["Axios","Config","methods","getDataSimple","baseUrl","endpoint","get","result","data","console","error","getData","processDynamoResponse","rawResponse","map","item","formatDynamoItem","performGetRequest","params","headers","Authorization","$cookie","performPostRequest","post","performRawPostRequest","put","getUserId","setUserIdCookie","id","set","removeUserIdCookie","delete","getUserName","setUserNameCookie","name","removeUserNameCookie","getUserGroup","setUserGroupCookie","group","removeUserGroupCookie","getSponsorBoothId","setSponsorBoothIdCookie","removeSponsorBoothIdCookie","checkIfUserHasTeam","teamParams","user_id","getEnvVariable","team","getCurrentEnvironment","window","location","hostname","variableName","shared","activityTracking","actionName","action","user_name","getDayOfTheWeek","date","weekday","Array","getDay","formatAMPM","toLocaleTimeString","hour","minute","hour12","replace","sleep","ms","Promise","resolve","setTimeout","formatCurrentDate","getMonth","getDate","getFullYear","setUserSlackId","email","user","slack_id","slackId","rawSlackId","setCurrentUserCookie","userObj","JSON","stringify","setToken","token","removeCurrentUserCookie","getCurrentUser","parse","addAchievement","achievement_name","type","points"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,eAAe;AACbC,EAAAA,OAAO,EAAE;AACP;AACA;AACMC,IAAAA,aAHC,yBAGaC,OAHb,EAGsBC,QAHtB,EAGgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEdL,KAAK,CAACM,GAAN,WAAaF,OAAb,cAAwBC,QAAxB,EAFc;;AAAA;AAE7BE,gBAAAA,MAF6B;AAAA,iDAG5BA,MAAM,CAACC,IAHqB;;AAAA;AAAA;AAAA;AAKnCC,gBAAAA,OAAO,CAACC,KAAR;AALmC,iDAM5B,IAN4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQtC,KAXM;AAYDC,IAAAA,OAZC,mBAYOP,OAZP,EAYgBC,QAZhB,EAY0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAERL,KAAK,CAACM,GAAN,WAAaF,OAAb,cAAwBC,QAAxB,EAFQ;;AAAA;AAEvBE,gBAAAA,MAFuB;AAAA,kDAGtB,KAAI,CAACK,qBAAL,CAA2BL,MAAM,CAACC,IAAlC,CAHsB;;AAAA;AAAA;AAAA;AAK7BC,gBAAAA,OAAO,CAACC,KAAR;AAL6B,kDAMtB,IANsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC,KApBM;AAqBPE,IAAAA,qBArBO,iCAqBeC,WArBf,EAqB4B;AAAA;;AACjC,aAAOA,WAAW,CAACC,GAAZ,CAAgB,UAACC,IAAD;AAAA,eAAU,MAAI,CAACC,gBAAL,CAAsBD,IAAtB,CAAV;AAAA,OAAhB,CAAP;AACD,KAvBM;AAwBPC,IAAAA,gBAxBO,4BAwBUD,IAxBV,EAwBgB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAOA,IAAP;AACD,KAhCM;AAiCDE,IAAAA,iBAjCC,6BAiCiBb,OAjCjB,EAiC0BC,QAjC1B,EAiCoCa,MAjCpC,EAiC4C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3CC,gBAAAA,OAD2C,GACjC;AACdA,kBAAAA,OAAO,EAAE;AAAEC,oBAAAA,aAAa,mBAAY,MAAI,CAACC,OAAL,CAAaf,GAAb,CAAiB,OAAjB,CAAZ;AAAf;AADK,iBADiC;AAAA;AAAA;AAAA,uBAK1BN,KAAK,CAACM,GAAN,WAAaF,OAAb,cAAwBC,QAAxB,GAAoC;AAAEa,kBAAAA,MAAM,EAANA;AAAF,iBAApC,EAAgDC,OAAhD,CAL0B;;AAAA;AAKzCZ,gBAAAA,MALyC;AAAA,kDAMxC,MAAI,CAACS,gBAAL,CAAsBT,MAAM,CAACC,IAA7B,CANwC;;AAAA;AAAA;AAAA;AAQ/CC,gBAAAA,OAAO,CAACC,KAAR;AAR+C,kDASxC,IATwC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWlD,KA5CM;AA6CDY,IAAAA,kBA7CC,8BA6CkBlB,OA7ClB,EA6C2BC,QA7C3B,EA6CqCa,MA7CrC,EA6C6C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CC,gBAAAA,OAD4C,GAClC;AACdA,kBAAAA,OAAO,EAAE;AACPC,oBAAAA,aAAa,mBAAY,MAAI,CAACC,OAAL,CAAaf,GAAb,CAAiB,OAAjB,CAAZ;AADN;AADK,iBADkC;AAAA;AAAA;AAAA,uBAO3BN,KAAK,CAACuB,IAAN,WAAcnB,OAAd,cAAyBC,QAAzB,GAAqCa,MAArC,EAA6CC,OAA7C,CAP2B;;AAAA;AAO1CZ,gBAAAA,MAP0C;AAAA,kDAQzCA,MAAM,CAACC,IARkC;;AAAA;AAAA;AAAA;AAUhDC,gBAAAA,OAAO,CAACC,KAAR;AAVgD,kDAWzC,IAXyC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAanD,KA1DM;AA2DDc,IAAAA,qBA3DC,iCA2DqBnB,QA3DrB,EA2D+Ba,MA3D/B,EA2DuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAErBlB,KAAK,CAACyB,GAAN,CAAUpB,QAAV,EAAoBa,MAApB,EAA4B;AAC/CC,kBAAAA,OAAO,EAAE;AACP,oCAAgB;AADT;AADsC,iBAA5B,CAFqB;;AAAA;AAEpCZ,gBAAAA,MAFoC;AAAA,kDAOnCA,MAAM,CAACC,IAP4B;;AAAA;AAAA;AAAA;AAS1CC,gBAAAA,OAAO,CAACC,KAAR;AAT0C,kDAUnC,IAVmC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY7C,KAvEM;AAwEPgB,IAAAA,SAxEO,uBAwEK;AACV,aAAO,KAAKL,OAAL,CAAaf,GAAb,CAAiB,QAAjB,CAAP;AACD,KA1EM;AA2EPqB,IAAAA,eA3EO,2BA2ESC,EA3ET,EA2Ea;AAClB,WAAKP,OAAL,CAAaQ,GAAb,CAAiB,QAAjB,EAA2BD,EAA3B,EAA+B,GAA/B;AACD,KA7EM;AA8EPE,IAAAA,kBA9EO,gCA8Ec;AACnB,WAAKT,OAAL,CAAaU,MAAb,CAAoB,QAApB;AACD,KAhFM;AAiFPC,IAAAA,WAjFO,yBAiFO;AACZ,aAAO,KAAKX,OAAL,CAAaf,GAAb,CAAiB,UAAjB,CAAP;AACD,KAnFM;AAoFP2B,IAAAA,iBApFO,6BAoFWC,IApFX,EAoFiB;AACtB,WAAKb,OAAL,CAAaQ,GAAb,CAAiB,UAAjB,EAA6BK,IAA7B,EAAmC,GAAnC;AACD,KAtFM;AAuFPC,IAAAA,oBAvFO,kCAuFgB;AACrB,WAAKd,OAAL,CAAaU,MAAb,CAAoB,UAApB;AACD,KAzFM;AA0FPK,IAAAA,YA1FO,0BA0FQ;AACb,aAAO,KAAKf,OAAL,CAAaf,GAAb,CAAiB,OAAjB,KAA6B,QAApC;AACD,KA5FM;AA6FP+B,IAAAA,kBA7FO,8BA6FYC,KA7FZ,EA6FmB;AACxB,WAAKjB,OAAL,CAAaQ,GAAb,CAAiB,OAAjB,EAA0BS,KAA1B,EAAiC,GAAjC;AACD,KA/FM;AAgGPC,IAAAA,qBAhGO,mCAgGiB;AACtB,WAAKlB,OAAL,CAAaU,MAAb,CAAoB,OAApB;AACD,KAlGM;AAmGPS,IAAAA,iBAnGO,+BAmGa;AAClB,aAAO,KAAKnB,OAAL,CAAaf,GAAb,CAAiB,gBAAjB,CAAP;AACD,KArGM;AAsGPmC,IAAAA,uBAtGO,mCAsGiBb,EAtGjB,EAsGqB;AAC1B,WAAKP,OAAL,CAAaQ,GAAb,CAAiB,gBAAjB,EAAmCD,EAAnC,EAAuC,GAAvC;AACD,KAxGM;AAyGPc,IAAAA,0BAzGO,wCAyGsB;AAC3B,WAAKrB,OAAL,CAAaU,MAAb,CAAoB,gBAApB;AACD,KA3GM;AA4GDY,IAAAA,kBA5GC,gCA4GoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,gBAAAA,UADmB,GACN;AACjBC,kBAAAA,OAAO,EAAE,MAAI,CAACnB,SAAL;AADQ,iBADM;AAAA;AAAA,uBAIN,MAAI,CAACT,iBAAL,CAAuB,MAAI,CAAC6B,cAAL,CAAoB,SAApB,CAAvB,EAAuD,kBAAvD,EAA2EF,UAA3E,CAJM;;AAAA;AAInBG,gBAAAA,IAJmB;;AAAA,qBAKrBA,IAAI,CAAC,CAAD,CALiB;AAAA;AAAA;AAAA;;AAAA,kDAMhB,IANgB;;AAAA;AAAA,kDAQlB,KARkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAS1B,KArHM;AAsHPC,IAAAA,qBAtHO,mCAsHiB;AACtB,UAAIC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,yBAAjC,EAA4D;AAC1D,eAAO,KAAP;AACD;;AACD,UAAIF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,KAA6B,8BAAjC,EAAiE;AAC/D,eAAO,KAAP;AACD;;AACD,aAAO,KAAP;AACD,KA9HM;AA+HPL,IAAAA,cA/HO,0BA+HQM,YA/HR,EA+HsB;AAC3B,UAAInD,MAAM,CAACoD,MAAP,CAAcD,YAAd,CAAJ,EAAiC;AAC/B,eAAOnD,MAAM,CAACoD,MAAP,CAAcD,YAAd,CAAP;AACD;;AACD,aAAOnD,MAAM,CAAC,KAAK+C,qBAAL,EAAD,CAAN,CAAqCI,YAArC,CAAP;AACD,KApIM;AAqIDE,IAAAA,gBArIC,4BAqIgBC,UArIhB,EAqI4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BrC,gBAAAA,MAD2B,GAClB;AACb2B,kBAAAA,OAAO,EAAE,MAAI,CAACnB,SAAL,EADI;AAEb8B,kBAAAA,MAAM,EAAED,UAFK;AAGbE,kBAAAA,SAAS,EAAE,MAAI,CAACzB,WAAL;AAHE,iBADkB;AAAA;AAAA,uBAM3B,MAAI,CAACV,kBAAL,CAAwB,MAAI,CAACwB,cAAL,CAAoB,SAApB,CAAxB,EAAwD,gBAAxD,EAA0E5B,MAA1E,CAN2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOlC,KA5IM;AA6IPwC,IAAAA,eA7IO,2BA6ISC,IA7IT,EA6Ie;AACpB,UAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAU,CAAV,CAAhB;AACAD,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,SAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,WAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,QAAb;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,GAAa,UAAb;AACA,aAAOA,OAAO,CAACD,IAAI,CAACG,MAAL,EAAD,CAAd;AACD,KAvJM;AAwJPC,IAAAA,UAxJO,sBAwJIJ,IAxJJ,EAwJU;AACf;AACA,aAAOA,IAAI,CAACK,kBAAL,CAAwB,EAAxB,EAA4B;AACjCC,QAAAA,IAAI,EAAE,SAD2B;AAEjCC,QAAAA,MAAM,EAAE,SAFyB;AAGjCC,QAAAA,MAAM,EAAE;AAHyB,OAA5B,EAIJC,OAJI,CAII,IAJJ,EAIU,EAJV,CAAP;AAKD,KA/JM;AAgKPC,IAAAA,KAhKO,iBAgKDC,EAhKC,EAgKG;AACR,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD;AAAA,eAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAvB;AAAA,OAAZ,CAAP;AACD,KAlKM;AAmKPI,IAAAA,iBAnKO,6BAmKWf,IAnKX,EAmKiB;AACtB,uBAAUA,IAAI,CAACgB,QAAL,KAAkB,CAA5B,cAAiChB,IAAI,CAACiB,OAAL,EAAjC,cAAmDjB,IAAI,CAACkB,WAAL,EAAnD;AACD,KArKM;AAsKDC,IAAAA,cAtKC,4BAsK4B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAdC,gBAAAA,KAAc,0EAAN,IAAM;AAAA;AAAA,uBACd,MAAI,CAAC9D,iBAAL,CAAuB,MAAI,CAAC6B,cAAL,CAAoB,SAApB,CAAvB,EAAuD,OAAvD,EAAgE;AAAElB,kBAAAA,EAAE,EAAE,MAAI,CAACF,SAAL;AAAN,iBAAhE,CADc;;AAAA;AAC3BsD,gBAAAA,IAD2B;;AAAA,oBAE5BA,IAAI,CAACC,QAFuB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGT,MAAI,CAAChE,iBAAL,CAAuB,MAAI,CAAC6B,cAAL,CAAoB,SAApB,CAAvB,EAAuD,sBAAvD,EAA+E;AAAEiC,kBAAAA,KAAK,EAAEA,KAAK,IAAIC,IAAI,CAACD;AAAvB,iBAA/E,CAHS;;AAAA;AAGzBG,gBAAAA,OAHyB;;AAAA,qBAI3BA,OAAO,CAACF,IAJmB;AAAA;AAAA;AAAA;;AAKvBG,gBAAAA,UALuB,GAKVD,OAAO,CAACF,IAAR,CAAapD,EALH;AAAA;AAAA,uBAMvB,MAAI,CAACN,kBAAL,CAAwB,MAAI,CAACwB,cAAL,CAAoB,SAApB,CAAxB,EAAwD,cAAxD,EAAwE;AAAElB,kBAAAA,EAAE,EAAE,MAAI,CAACF,SAAL,EAAN;AAAwBuD,kBAAAA,QAAQ,EAAEE;AAAlC,iBAAxE,CANuB;;AAAA;AAAA,kDAOtB,IAPsB;;AAAA;AAAA;AAAA;;AAAA;AAAA,kDAUxB,IAVwB;;AAAA;AAAA,kDAY1B,KAZ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAalC,KAnLM;AAoLPC,IAAAA,oBApLO,gCAoLcC,OApLd,EAoLuB;AAC5B,WAAKhE,OAAL,CAAaQ,GAAb,CAAiB,MAAjB,EAAyByD,IAAI,CAACC,SAAL,CAAeF,OAAf,CAAzB,EAAkD,GAAlD;AACD,KAtLM;AAuLPG,IAAAA,QAvLO,oBAuLEC,KAvLF,EAuLS;AACd,WAAKpE,OAAL,CAAaQ,GAAb,CAAiB,OAAjB,EAA0B4D,KAA1B,EAAiC,GAAjC;AACD,KAzLM;AA0LPC,IAAAA,uBA1LO,mCA0LiBL,OA1LjB,EA0L0B;AAC/B,WAAKhE,OAAL,CAAaU,MAAb,CAAoB,MAApB,EAA4BuD,IAAI,CAACC,SAAL,CAAeF,OAAf,CAA5B,EAAqD,GAArD;AACD,KA5LM;AA6LPM,IAAAA,cA7LO,4BA6LU;AACf,aAAOL,IAAI,CAACM,KAAL,CAAW,KAAKvE,OAAL,CAAaf,GAAb,CAAiB,MAAjB,CAAX,CAAP;AACD,KA/LM;AAiMP;AACMuF,IAAAA,cAlMC,0BAkMchD,OAlMd,EAkMuBiD,gBAlMvB,EAkMyCC,IAlMzC,EAkM+C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9C7E,gBAAAA,MAD8C,GACrC;AACb2B,kBAAAA,OAAO,EAAPA,OADa;AAEbiD,kBAAAA,gBAAgB,EAAhBA,gBAFa;AAGbC,kBAAAA,IAAI,EAAJA,IAHa;AAIbC,kBAAAA,MAAM,EAAE;AAJK,iBADqC;AAAA,kDAO7C,MAAI,CAAC1E,kBAAL,CAAwB,MAAI,CAACwB,cAAL,CAAoB,SAApB,CAAxB,EAAwD,iBAAxD,EAA2E5B,MAA3E,CAP6C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQrD;AA1MM;AADI,CAAf","sourcesContent":["import Axios from 'axios';\nimport Config from '../config/general';\n\nexport default {\n  methods: {\n    // use this where the get data endpoint uses the AWS Document Client\n    // (AKA data is already formatted JSON)\n    async getDataSimple(baseUrl, endpoint) {\n      try {\n        const result = await Axios.get(`${baseUrl}/${endpoint}`);\n        return result.data;\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n    async getData(baseUrl, endpoint) {\n      try {\n        const result = await Axios.get(`${baseUrl}/${endpoint}`);\n        return this.processDynamoResponse(result.data);\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n    processDynamoResponse(rawResponse) {\n      return rawResponse.map((item) => this.formatDynamoItem(item));\n    },\n    formatDynamoItem(item) {\n      // Not sure why this just returns a new object with\n      // const formattedItem = {};\n      // Object.keys(item).forEach((key) => {\n      //   formattedItem[key] = item[key];\n      // });\n      // return formattedItem;\n      return item;\n    },\n    async performGetRequest(baseUrl, endpoint, params) {\n      const headers = {\n        headers: { Authorization: `Bearer ${this.$cookie.get('token')}` },\n      };\n      try {\n        const result = await Axios.get(`${baseUrl}/${endpoint}`, { params }, headers);\n        return this.formatDynamoItem(result.data);\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n    async performPostRequest(baseUrl, endpoint, params) {\n      const headers = {\n        headers: {\n          Authorization: `Bearer ${this.$cookie.get('token')}`,\n        },\n      };\n      try {\n        const result = await Axios.post(`${baseUrl}/${endpoint}`, params, headers);\n        return result.data;\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n    async performRawPostRequest(endpoint, params) {\n      try {\n        const result = await Axios.put(endpoint, params, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n        });\n        return result.data;\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    },\n    getUserId() {\n      return this.$cookie.get('userId');\n    },\n    setUserIdCookie(id) {\n      this.$cookie.set('userId', id, 100);\n    },\n    removeUserIdCookie() {\n      this.$cookie.delete('userId');\n    },\n    getUserName() {\n      return this.$cookie.get('userName');\n    },\n    setUserNameCookie(name) {\n      this.$cookie.set('userName', name, 100);\n    },\n    removeUserNameCookie() {\n      this.$cookie.delete('userName');\n    },\n    getUserGroup() {\n      return this.$cookie.get('group') || 'hacker';\n    },\n    setUserGroupCookie(group) {\n      this.$cookie.set('group', group, 100);\n    },\n    removeUserGroupCookie() {\n      this.$cookie.delete('group');\n    },\n    getSponsorBoothId() {\n      return this.$cookie.get('sponsorBoothId');\n    },\n    setSponsorBoothIdCookie(id) {\n      this.$cookie.set('sponsorBoothId', id, 100);\n    },\n    removeSponsorBoothIdCookie() {\n      this.$cookie.delete('sponsorBoothId');\n    },\n    async checkIfUserHasTeam() {\n      const teamParams = {\n        user_id: this.getUserId(),\n      };\n      const team = await this.performGetRequest(this.getEnvVariable('BACKEND'), 'teams/membership', teamParams);\n      if (team[0]) {\n        return true;\n      }\n      return false;\n    },\n    getCurrentEnvironment() {\n      if (window.location.hostname === 'platform.gotechnica.org') {\n        return 'prd';\n      }\n      if (window.location.hostname === 'platform.beta.gotechnica.org') {\n        return 'stg';\n      }\n      return 'dev';\n    },\n    getEnvVariable(variableName) {\n      if (Config.shared[variableName]) {\n        return Config.shared[variableName];\n      }\n      return Config[this.getCurrentEnvironment()][variableName];\n    },\n    async activityTracking(actionName) {\n      const params = {\n        user_id: this.getUserId(),\n        action: actionName,\n        user_name: this.getUserName(),\n      };\n      await this.performPostRequest(this.getEnvVariable('BACKEND'), 'users/activity', params);\n    },\n    getDayOfTheWeek(date) {\n      const weekday = new Array(7);\n      weekday[0] = 'Sunday';\n      weekday[1] = 'Monday';\n      weekday[2] = 'Tuesday';\n      weekday[3] = 'Wednesday';\n      weekday[4] = 'Thursday';\n      weekday[5] = 'Friday';\n      weekday[6] = 'Saturday';\n      return weekday[date.getDay()];\n    },\n    formatAMPM(date) {\n      // Convert to AM/PM local time\n      return date.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true,\n      }).replace(/ /g, '');\n    },\n    sleep(ms) {\n      return new Promise((resolve) => setTimeout(resolve, ms));\n    },\n    formatCurrentDate(date) {\n      return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n    },\n    async setUserSlackId(email = null) {\n      const user = await this.performGetRequest(this.getEnvVariable('BACKEND'), 'users', { id: this.getUserId() });\n      if (!user.slack_id) {\n        const slackId = await this.performGetRequest(this.getEnvVariable('BACKEND'), 'projects/lookup_user', { email: email || user.email });\n        if (slackId.user) {\n          const rawSlackId = slackId.user.id;\n          await this.performPostRequest(this.getEnvVariable('BACKEND'), 'users/update', { id: this.getUserId(), slack_id: rawSlackId });\n          return true;\n        }\n      } else {\n        return true;\n      }\n      return false;\n    },\n    setCurrentUserCookie(userObj) {\n      this.$cookie.set('user', JSON.stringify(userObj), 100);\n    },\n    setToken(token) {\n      this.$cookie.set('token', token, 100);\n    },\n    removeCurrentUserCookie(userObj) {\n      this.$cookie.delete('user', JSON.stringify(userObj), 100);\n    },\n    getCurrentUser() {\n      return JSON.parse(this.$cookie.get('user'));\n    },\n\n    // eslint-disable-next-line camelcase\n    async addAchievement(user_id, achievement_name, type) {\n      const params = {\n        user_id,\n        achievement_name,\n        type,\n        points: 10,\n      };\n      return this.performPostRequest(this.getEnvVariable('BACKEND'), 'add_achievement', params);\n    },\n  },\n};\n"]}]}