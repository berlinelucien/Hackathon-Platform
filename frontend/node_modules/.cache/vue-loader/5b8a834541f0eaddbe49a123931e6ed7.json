{"remainingRequest":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/berlin/Documents/platform/frontend/src/views/JoinTeam.vue?vue&type=style&index=0&id=7a97d561&scoped=true&lang=css&","dependencies":[{"path":"/Users/berlin/Documents/platform/frontend/src/views/JoinTeam.vue","mtime":1634085832812},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/css-loader/dist/cjs.js","mtime":1634257405846},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1634257408068},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/postcss-loader/src/index.js","mtime":1634257406599},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1634257404436},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js","mtime":1634257407250}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoud2FybmluZy10ZXh0IHsKICBjb2xvcjogdmFyKC0tY29sb3ItZXJyb3IpOwogIGZvbnQtc2l6ZTogMjBweDsKICBmb250LXdlaWdodDogYm9sZDsKICBwYWRkaW5nOiAycmVtIDA7Cn0K"},{"version":3,"sources":["JoinTeam.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwPA;AACA;AACA;AACA;AACA;AACA","file":"JoinTeam.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <b-container>\n    <b-row align-h=\"center\">\n      <b-card class=\"col-10\">\n        <template v-if=\"!dataLoading\">\n\n          <template v-if=\"!error\">\n            <h3 class=\"mb-3\">You've been invited to \"{{team.team_name}}\"</h3>\n            <p\n              class=\"warning-text\"\n              v-if=\"oldTeam\"\n            >Careful! If you join \"{{team.team_name}},\" you'll be removed from your current team: \"{{this.oldTeam.team_name}}\"</p>\n\n            <Button\n              @click=\"$router.push('/team')\"\n              outlined\n            >\n              Cancel\n            </Button>\n            <Button @click=\"handleJoinTeamClick\">{{this.oldTeam ? 'Leave Old Team And ' : ''}}Join This Team</Button>\n          </template>\n\n          <template v-else>\n            <h3>{{error.title}}</h3>\n            <p>{{error.description}}</p>\n            <Button @click=\"$router.push('/team')\">Go Back to My Team Page</Button>\n          </template>\n        </template>\n\n        <LoadingSpinner\n          class=\"m-0\"\n          v-else\n        />\n      </b-card>\n    </b-row>\n  </b-container>\n</template>\n\n<script>\nimport Button from '../components/Button.vue';\nimport LoadingSpinner from '../components/LoadingSpinner.vue';\nimport generalMixin from '../mixins/general';\n\nconst MAX_TEAM_SIZE = 4; // As per MLH rules\n\nexport default {\n  mixins: [generalMixin],\n  name: 'JoinTeam',\n  components: {\n    Button,\n    LoadingSpinner,\n  },\n  data() {\n    return {\n      dataLoading: true,\n      error: null,\n      team: null,\n      oldTeam: null,\n      teamMembers: null,\n      teamId: this.$route.params.team,\n    };\n  },\n  async mounted() {\n    // Fetch team-related info info\n    [this.team, this.oldTeam, this.teamMembers] = await Promise.all([\n      this.fetchTeamInfo(),\n      this.fetchUsersOldTeam(),\n      this.fetchTeamMembers(),\n    ]);\n\n    // Check for errors\n    if (!this.team) {\n      this.raiseInvalidLinkError();\n    } else if (this.teamMembers.length >= MAX_TEAM_SIZE) {\n      this.raiseTooManyMembersError();\n    } else if (this.oldTeam && this.oldTeam.team_id === this.teamId) {\n      this.raiseAlreadyPartOfTeamError();\n    }\n\n    this.dataLoading = false;\n  },\n  methods: {\n    /**\n     * Given a team id in the route parameters, fetch that team's info\n     */\n    fetchTeamInfo() {\n      const params = { id: this.teamId };\n\n      return this.performGetRequest(\n        this.getEnvVariable('BACKEND'),\n        'teams',\n        params,\n      );\n    },\n    /**\n     * Fetches the current team of the given user, if it exists\n     */\n    async fetchUsersOldTeam() {\n      const params = {\n        user_id: this.getUserId(),\n      };\n\n      // Extract most recent team that a user joined (first team in the list returned\n      // by the HTTP route)\n      const [mostRecentTeam] = await this.performGetRequest(\n        this.getEnvVariable('BACKEND'),\n        'teams/membership',\n        params,\n      );\n\n      return mostRecentTeam;\n    },\n    /**\n     * Enters the loading state while trying to join a team\n     */\n    async handleJoinTeamClick() {\n      this.dataLoading = true;\n      await this.acceptInvitation();\n      this.dataLoading = false;\n    },\n    /**\n     * Accepts the team invitation, removing the user from their current team if necessary\n     */\n    async acceptInvitation() {\n      // Make sure there's enough space on this team for a new member\n      this.teamMembers = await this.fetchTeamMembers();\n      if (this.teamMembers.length >= MAX_TEAM_SIZE) {\n        this.raiseTooManyMembersError();\n        return;\n      }\n\n      // Leave the old team if it exists\n      if (this.oldTeam) {\n        const didLeaveOldTeam = await this.leaveOldTeam();\n        // console.log({ didLeaveOldTeam });\n\n        if (!didLeaveOldTeam) {\n          this.raiseCouldntLeaveTeamError();\n          return;\n        }\n\n        // Broadcast to the UI that the user left their team\n        this.$emit('teamMembershipChanged', false);\n      }\n\n      const joinedTeam = await this.joinTeam();\n      // console.log({ joinedTeam });\n\n      if (!joinedTeam) {\n        this.raiseCouldntJoinTeamError();\n      } else {\n        // Broadcast to the UI that the user joined a new team\n        this.$emit('teamMembershipChanged', true);\n        this.$router.push('/team');\n      }\n    },\n    /**\n     * Leaves the old team the user was on\n     */\n    async leaveOldTeam() {\n      const params = {\n        user_id: this.getUserId(),\n      };\n\n      return this.performPostRequest(\n        this.getEnvVariable('BACKEND'),\n        'teams/leave',\n        params,\n      );\n    },\n    /**\n     * Join the new team (that the user was invited to)\n     */\n    async joinTeam() {\n      const params = {\n        team_id: this.teamId,\n        user_id: this.getUserId(),\n        team_name: this.team.team_name,\n      };\n\n      return this.performPostRequest(\n        this.getEnvVariable('BACKEND'),\n        'teams/join',\n        params,\n      );\n    },\n    /**\n     * Gets the current members on the provided team\n     */\n    async fetchTeamMembers() {\n      const params = { team_id: this.teamId };\n\n      return this.performGetRequest(\n        this.getEnvVariable('BACKEND'),\n        'teams/members',\n        params,\n      );\n    },\n    /**\n     * Handles cases where the team id is invalid\n     */\n    raiseInvalidLinkError() {\n      this.error = {\n        title: 'Invalid Team Invite Link',\n        description: 'The invite link you entered doesn\\'t match any teams in our system.',\n      };\n    },\n    /**\n     * Handles cases where the user already belongs to the team they're being invited to\n     */\n    raiseAlreadyPartOfTeamError() {\n      this.error = {\n        title: 'You Are Already a Member of This Team',\n        description: '',\n      };\n    },\n    /**\n     * Handles cases where the user was unable to leave the team\n     */\n    raiseCouldntLeaveTeamError() {\n      this.error = {\n        title: 'Error Leaving Your Current Team',\n        description: 'We ran into an issue removing you from your current team. Sorry! Please try joining this team again.',\n      };\n    },\n    /**\n     * Handles cases where the user was unable to join the team\n     */\n    raiseCouldntJoinTeamError() {\n      this.error = {\n        title: 'Error Joining New Team',\n        description: 'We ran into an issue adding you to makin team. Sorry! Please try joining this team again.',\n      };\n    },\n    /**\n     * Handles cases where there are already the maximum number of users on a given team\n     */\n    raiseTooManyMembersError() {\n      this.error = {\n        title: 'This Team is Already Full!',\n        description: 'The team you are trying to join already has 4 members (the maximum allowed by MLH).',\n      };\n    },\n  },\n};\n</script>\n\n<style scoped>\n.warning-text {\n  color: var(--color-error);\n  font-size: 20px;\n  font-weight: bold;\n  padding: 2rem 0;\n}\n</style>\n"]}]}