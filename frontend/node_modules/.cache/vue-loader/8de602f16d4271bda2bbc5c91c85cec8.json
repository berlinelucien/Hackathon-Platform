{"remainingRequest":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/berlin/Documents/platform/frontend/src/views/RequestMentor.vue?vue&type=template&id=c10a2934&scoped=true&","dependencies":[{"path":"/Users/berlin/Documents/platform/frontend/src/views/RequestMentor.vue","mtime":1634085832814},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1634257404436},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1634257408118},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1634257404436},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js","mtime":1634257407250}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}