{"remainingRequest":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/berlin/Documents/platform/frontend/src/components/Video.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/berlin/Documents/platform/frontend/src/components/Video.vue","mtime":1634085832808},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/css-loader/dist/cjs.js","mtime":1634257405846},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1634257408068},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/postcss-loader/src/index.js","mtime":1634257406599},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1634257404436},{"path":"/Users/berlin/Documents/platform/frontend/node_modules/vue-loader/lib/index.js","mtime":1634257407250}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnJlbW90ZV92aWRlb19jb250YWluZXIgewogIGxlZnQ6IDA7CiAgbWFyZ2luOiAwOwogIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxMjQsIDEyOSwgMTI0KTsKfQojbG9jYWxUcmFjayB2aWRlbyB7CiAgICBib3JkZXI6IDNweCBzb2xpZCByZ2IoMTI0LCAxMjksIDEyNCk7CiAgICBtYXJnaW46IDBweDsKICAgIG1heC13aWR0aDogNTAlICFpbXBvcnRhbnQ7CiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Owp9Ci5zcGFjaW5nIHsKICBwYWRkaW5nOiAyMHB4OwogIHdpZHRoOiAxMDAlOwp9Ci5yb29tVGl0bGUgewogICAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEyNCwgMTI5LCAxMjQpOwogICAgcGFkZGluZzogNHB4OwogICAgY29sb3I6IGRvZGdlcmJsdWU7Cn0K"},{"version":3,"sources":["Video.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Video.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"col-md-6 box\">\n    <div class=\"roomTitle\">\n      <span v-if=\"loading\"> Loading... {{roomName}}</span>\n      <span v-else-if=\"!loading && roomName\"> Connected to {{roomName}}</span>\n      <span v-else>Select a room to get started</span>\n    </div>\n    <div class=\"row remote_video_container\">\n      <div id=\"remoteTrack\"></div>\n    </div>\n    <div class=\"spacing\"></div>\n    <div class=\"row\">\n      <div id=\"localTrack\"></div>\n    </div>\n    <button type=\"submit\"\n      size=\"sm\"\n      style=\"top: 5px,\n      left: 5px\"\n      @click=\"\n        leaveRoomIfJoined();\n      \"\n      class=\"btn btn-danger mb-2 Botton\">End Meeting\n    </button>\n  </div>\n</template>\n\n<script>\n// TODO: Update code to support twilio-video 2.x.x\nimport Twilio, { createLocalVideoTrack } from 'twilio-video';\nimport Axios from 'axios';\nimport generalMixin from '../mixins/general';\n\nconst jwt = require('jsonwebtoken');\n\nexport default {\n  name: 'Video',\n  mixins: [generalMixin],\n  data() {\n    return {\n      loading: false,\n      data: {},\n      localTrack: false,\n      remoteTrack: '',\n      activeRoom: '',\n      previewTracks: '',\n      identity: '',\n    };\n  },\n  props: ['username', 'roomName'],\n  created() {\n    this.createChat(this.roomName);\n    // When a user is about to transition away from this page,\n    // disconnect from the room, if joined.\n    window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n  },\n  methods: {\n    async getAccessToken() {\n      // TODO: Replace username with email\n      return Axios.get(`${this.getEnvVariable('BACKEND')}/${this.getCurrentEnvironment()}/chats/token`, {\n        headers: {\n          Authorization: `Bearer ${jwt.sign({ email: this.username }, 'technica')}`,\n        },\n      });\n    },\n    showRoom(room) {\n      this.roomName = room;\n      this.createChat(this.roomName);\n      window.addEventListener('beforeunload', this.leaveRoomIfJoined);\n      this.startDate = new Date();\n    },\n    // Attach the Tracks to the DOM.\n    attachTracks(tracks, container) {\n      tracks.forEach((track) => {\n        container.appendChild(track.attach());\n      });\n    },\n    // Attach the Participant's Tracks to the DOM.\n    attachParticipantTracks(participant, container) {\n      const tracks = Array.from(participant.tracks.values());\n      this.attachTracks(tracks, container);\n    },\n    // Detach the Tracks from the DOM.\n    detachTracks(tracks) {\n      tracks.forEach((track) => {\n        track.detach().forEach((detachedElement) => {\n          detachedElement.remove();\n        });\n      });\n    },\n    // Detach the Participant's Tracks from the DOM.\n    detachParticipantTracks(participant) {\n      const tracks = Array.from(participant.tracks.values());\n      this.detachTracks(tracks);\n    },\n    // Leave Room.\n    leaveRoomIfJoined() {\n      if (this.activeRoom) {\n        this.activeRoom.disconnect();\n        Twilio.disconnect();\n        console.log('Disconnected from room');\n      }\n    },\n    // TODO: Add mute video / audio functionality following https://medium.com/teamarimac/twilio-programmable-video-chat-with-laravel-and-vue-js-a485a2d31f5d\n    // Mute audio of video chat\n    mute_audio() {\n      this.activeRoom.localParticipant.audioTracks.forEach((audioTrack) => {\n        audioTrack.disable();\n      });\n      this.microphone = false;\n    },\n    // Unmute audio of video chat\n    unmute_audio() {\n      this.activeRoom.localParticipant.audioTracks.forEach((audioTrack) => {\n        audioTrack.enable();\n      });\n      this.microphone = true;\n    },\n    // Mute video\n    mute_video() {\n      this.activeRoom.localParticipant.videoTracks.forEach((videoTrack) => {\n        videoTrack.disable();\n      });\n      this.camera = false;\n    },\n    // Unmute video\n    unmute_video() {\n      this.activeRoom.localParticipant.videoTracks.forEach((videoTrack) => {\n        videoTrack.enable();\n      });\n      this.camera = true;\n    },\n    createChat(roomName) {\n      this.loading = true;\n      const VueThis = this;\n      this.getAccessToken().then((response) => {\n        VueThis.roomName = null;\n        const { token } = response.data;\n        const connectOptions = {\n          name: roomName,\n          // logLevel: 'debug',\n          audio: true,\n          video: { width: 600 },\n        };\n          // before a user enters a new room,\n          // disconnect the user from they joined already\n        this.leaveRoomIfJoined();\n\n        // remove any remote track when joining a new room\n        document.getElementById('remoteTrack').innerHTML = '';\n        Twilio.connect(token, connectOptions).then((room) => {\n          // set active toom\n          VueThis.activeRoom = room;\n          VueThis.roomName = roomName;\n          VueThis.loading = false;\n          console.log('Connected to room');\n\n          // Attach the Tracks of the Room's Participants.\n          room.participants.forEach((participant) => {\n            console.log(participant);\n            const previewContainer = document.getElementById('remoteTrack');\n            VueThis.attachParticipantTracks(participant, previewContainer);\n          });\n          // When a Participant joins the Room, log the event.\n          room.on('participantConnected', (participant) => {\n            console.log(`Joining: '${participant.identity}'`);\n          });\n          // When a Participant adds a Track, attach it to the DOM.\n          room.on('trackAdded', (track, participant) => {\n            console.log(`${participant.identity} added track: ${track.kind}`);\n            const previewContainer = document.getElementById('remoteTrack');\n            VueThis.attachTracks([track], previewContainer);\n          });\n          // When a Participant removes a Track, detach it from the DOM.\n          room.on('trackRemoved', (track, participant) => {\n            console.log(`${participant.identity} removed track: ${track.kind}`);\n            VueThis.detachTracks([track]);\n          });\n          // When a Participant leaves the Room, detach its Tracks.\n          room.on('participantDisconnected', (participant) => {\n            console.log(`Participant '${participant.identity}' left the room`);\n            VueThis.detachParticipantTracks(participant);\n          });\n          // if local preview is not active, create it\n          if (!VueThis.localTrack) {\n            createLocalVideoTrack().then((track) => {\n              const localMediaContainer = document.getElementById('localTrack');\n              localMediaContainer.appendChild(track.attach());\n              VueThis.localTrack = true;\n            });\n          }\n        });\n      });\n    },\n  },\n};\n</script>\n\n<style >\n  .remote_video_container {\n    left: 0;\n    margin: 0;\n    border: 1px solid rgb(124, 129, 124);\n  }\n  #localTrack video {\n      border: 3px solid rgb(124, 129, 124);\n      margin: 0px;\n      max-width: 50% !important;\n      background-repeat: no-repeat;\n  }\n  .spacing {\n    padding: 20px;\n    width: 100%;\n  }\n  .roomTitle {\n      border: 1px solid rgb(124, 129, 124);\n      padding: 4px;\n      color: dodgerblue;\n  }\n</style>\n"]}]}